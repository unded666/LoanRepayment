<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI, Request, Form&#10;from fastapi.responses import HTMLResponse&#10;from fastapi.staticfiles import StaticFiles&#10;from fastapi.templating import Jinja2Templates&#10;from finance import (&#10;    AmortizationComparisonDifference,&#10;    AmortizationComparisonResult,&#10;    calculate_amortization&#10;)&#10;from datetime import date&#10;from pydantic import BaseModel&#10;import requests&#10;&#10;app = FastAPI()&#10;app.mount(&quot;/static&quot;, StaticFiles(directory=&quot;static&quot;), name=&quot;static&quot;)&#10;templates = Jinja2Templates(directory=&quot;templates&quot;)&#10;&#10;class CalculationResponseWithCurrency(BaseModel):&#10;    result: AmortizationComparisonResult&#10;    currency_symbol: str&#10;&#10;COUNTRY_CURRENCY = {&#10;    'US': '$', 'CA': '$', 'GB': '£', 'DE': '€', 'FR': '€', 'ES': '€', 'IT': '€', 'IE': '€',&#10;    'JP': '¥', 'CN': '¥', 'IN': '₹', 'AU': '$', 'NZ': '$', 'SG': '$', 'ZA': 'R', 'CH': 'CHF',&#10;    'SE': 'kr', 'NO': 'kr', 'DK': 'kr', 'PL': 'zł', 'CZ': 'Kč', 'RU': '₽', 'BR': 'R$', 'MX': '$',&#10;    'KR': '₩', 'TR': '₺', 'IL': '₪', 'SA': '﷼', 'AE': 'د.إ', 'HK': '$', 'MY': 'RM', 'TH': '฿',&#10;    'ID': 'Rp', 'PH': '₱', 'NG': '₦', 'EG': '£', 'PK': '₨', 'BD': '৳', 'UA': '₴', 'AR': '$',&#10;    'CL': '$', 'CO': '$', 'PE': 'S/', 'VE': 'Bs', 'VN': '₫', 'TW': 'NT$', 'HU': 'Ft',&#10;}&#10;&#10;def get_currency_symbol_from_ip(ip: str) -&gt; str:&#10;    try:&#10;        resp = requests.get(f&quot;https://ipapi.co/{ip}/json/&quot;, timeout=2)&#10;        if resp.status_code == 200:&#10;            data = resp.json()&#10;            country = data.get('country')&#10;            if country and country in COUNTRY_CURRENCY:&#10;                return COUNTRY_CURRENCY[country]&#10;    except Exception:&#10;        pass&#10;    return '$'  # Default to USD&#10;&#10;@app.get(&quot;/&quot;, response_class=HTMLResponse)&#10;async def read_root(request: Request):&#10;    return templates.TemplateResponse(&quot;index.html&quot;, {&quot;request&quot;: request})&#10;&#10;@app.post(&quot;/calculate&quot;, response_model=CalculationResponseWithCurrency)&#10;async def calculate(&#10;    request: Request,&#10;    purchase_price: float = Form(...),&#10;    interest_rate: float = Form(...),&#10;    down_payment: float = Form(...),&#10;    loan_term: int = Form(...),&#10;    start_date: str = Form(...),&#10;    custom_repayment: float = Form(None)&#10;):&#10;    client_ip = request.client.host if request.client else None&#10;    if client_ip in (&quot;127.0.0.1&quot;, &quot;::1&quot;, None):&#10;        xff = request.headers.get(&quot;x-forwarded-for&quot;)&#10;        if xff:&#10;            client_ip = xff.split(&quot;,&quot;)[0].strip()&#10;    currency_symbol = get_currency_symbol_from_ip(client_ip or &quot;&quot;)&#10;    orig_result = calculate_amortization(&#10;        purchase_price=purchase_price,&#10;        interest_rate=interest_rate,&#10;        down_payment=down_payment,&#10;        loan_term_years=loan_term,&#10;        start_date=date.fromisoformat(start_date)&#10;    )&#10;    custom_result = None&#10;    diff = None&#10;    if custom_repayment and custom_repayment &gt; orig_result.summary.monthly_payment:&#10;        custom_result = calculate_amortization(&#10;            purchase_price=purchase_price,&#10;            interest_rate=interest_rate,&#10;            down_payment=down_payment,&#10;            loan_term_years=loan_term,&#10;            start_date=date.fromisoformat(start_date),&#10;            custom_repayment=custom_repayment&#10;        )&#10;        diff = AmortizationComparisonDifference(&#10;            total_payments_diff=round(orig_result.summary.total_payments - custom_result.summary.total_payments, 2),&#10;            months_diff=len(orig_result.schedule) - len(custom_result.schedule)&#10;        )&#10;    result = AmortizationComparisonResult(&#10;        original=orig_result,&#10;        custom=custom_result,&#10;        difference=diff&#10;    )&#10;    return CalculationResponseWithCurrency(result=result, currency_symbol=currency_symbol)&#10;&#10;def main():&#10;    import uvicorn&#10;    uvicorn.run(&quot;main:app&quot;, host=&quot;0.0.0.0&quot;, port=8000, reload=True)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI, Request, Form&#10;from fastapi.responses import HTMLResponse&#10;from fastapi.staticfiles import StaticFiles&#10;from fastapi.templating import Jinja2Templates&#10;from finance import (&#10;    AmortizationComparisonDifference,&#10;    AmortizationComparisonResult,&#10;    calculate_amortization&#10;)&#10;from datetime import date&#10;from pydantic import BaseModel&#10;import requests&#10;import sys&#10;&#10;app = FastAPI()&#10;app.mount(&quot;/static&quot;, StaticFiles(directory=&quot;static&quot;), name=&quot;static&quot;)&#10;templates = Jinja2Templates(directory=&quot;templates&quot;)&#10;&#10;class CalculationResponseWithCurrency(BaseModel):&#10;    result: AmortizationComparisonResult&#10;    currency_symbol: str&#10;&#10;COUNTRY_CURRENCY = {&#10;    'US': '$', 'CA': '$', 'GB': '£', 'DE': '€', 'FR': '€', 'ES': '€', 'IT': '€', 'IE': '€',&#10;    'JP': '¥', 'CN': '¥', 'IN': '₹', 'AU': '$', 'NZ': '$', 'SG': '$', 'ZA': 'R', 'CH': 'CHF',&#10;    'SE': 'kr', 'NO': 'kr', 'DK': 'kr', 'PL': 'zł', 'CZ': 'Kč', 'RU': '₽', 'BR': 'R$', 'MX': '$',&#10;    'KR': '₩', 'TR': '₺', 'IL': '₪', 'SA': '﷼', 'AE': 'د.إ', 'HK': '$', 'MY': 'RM', 'TH': '฿',&#10;    'ID': 'Rp', 'PH': '₱', 'NG': '₦', 'EG': '£', 'PK': '₨', 'BD': '৳', 'UA': '₴', 'AR': '$',&#10;    'CL': '$', 'CO': '$', 'PE': 'S/', 'VE': 'Bs', 'VN': '₫', 'TW': 'NT$', 'HU': 'Ft',&#10;}&#10;&#10;def get_currency_symbol_from_ip(ip: str) -&gt; str:&#10;    try:&#10;        resp = requests.get(f&quot;https://ipapi.co/{ip}/json/&quot;, timeout=2)&#10;        if resp.status_code == 200:&#10;            data = resp.json()&#10;            country = data.get('country')&#10;            if country and country in COUNTRY_CURRENCY:&#10;                return COUNTRY_CURRENCY[country]&#10;    except Exception:&#10;        pass&#10;    return '$'  # Default to USD&#10;&#10;@app.get(&quot;/&quot;, response_class=HTMLResponse)&#10;async def read_root(request: Request):&#10;    return templates.TemplateResponse(&quot;index.html&quot;, {&quot;request&quot;: request})&#10;&#10;@app.post(&quot;/calculate&quot;, response_model=CalculationResponseWithCurrency)&#10;async def calculate(&#10;    request: Request,&#10;    purchase_price: float = Form(...),&#10;    interest_rate: float = Form(...),&#10;    down_payment: float = Form(...),&#10;    loan_term: int = Form(...),&#10;    start_date: str = Form(...),&#10;    custom_repayment: float = Form(None)&#10;):&#10;    try:&#10;        print(f&quot;Received: purchase_price={purchase_price}, interest_rate={interest_rate}, down_payment={down_payment}, loan_term={loan_term}, start_date={start_date}, custom_repayment={custom_repayment}&quot;, file=sys.stderr)&#10;        client_ip = request.client.host if request.client else None&#10;        if client_ip in (&quot;127.0.0.1&quot;, &quot;::1&quot;, None):&#10;            xff = request.headers.get(&quot;x-forwarded-for&quot;)&#10;            if xff:&#10;                client_ip = xff.split(&quot;,&quot;)[0].strip()&#10;        print(f&quot;Client IP: {client_ip}&quot;, file=sys.stderr)&#10;        currency_symbol = get_currency_symbol_from_ip(client_ip or &quot;&quot;)&#10;        print(f&quot;Currency symbol: {currency_symbol}&quot;, file=sys.stderr)&#10;        orig_result = calculate_amortization(&#10;            purchase_price=purchase_price,&#10;            interest_rate=interest_rate,&#10;            down_payment=down_payment,&#10;            loan_term_years=loan_term,&#10;            start_date=date.fromisoformat(start_date)&#10;        )&#10;        custom_result = None&#10;        diff = None&#10;        if custom_repayment and custom_repayment &gt; orig_result.summary.monthly_payment:&#10;            custom_result = calculate_amortization(&#10;                purchase_price=purchase_price,&#10;                interest_rate=interest_rate,&#10;                down_payment=down_payment,&#10;                loan_term_years=loan_term,&#10;                start_date=date.fromisoformat(start_date),&#10;                custom_repayment=custom_repayment&#10;            )&#10;            diff = AmortizationComparisonDifference(&#10;                total_payments_diff=round(orig_result.summary.total_payments - custom_result.summary.total_payments, 2),&#10;                months_diff=len(orig_result.schedule) - len(custom_result.schedule)&#10;            )&#10;        result = AmortizationComparisonResult(&#10;            original=orig_result,&#10;            custom=custom_result,&#10;            difference=diff&#10;        )&#10;        return CalculationResponseWithCurrency(result=result, currency_symbol=currency_symbol)&#10;    except Exception as e:&#10;        print(f&quot;Exception in /calculate: {e}&quot;, file=sys.stderr)&#10;        import traceback&#10;        traceback.print_exc(file=sys.stderr)&#10;        from fastapi.responses import JSONResponse&#10;        return JSONResponse(status_code=500, content={&quot;error&quot;: str(e)})&#10;&#10;def main():&#10;    import uvicorn&#10;    uvicorn.run(&quot;main:app&quot;, host=&quot;0.0.0.0&quot;, port=8000, reload=True)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>