<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/static/app.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/static/app.js" />
              <option name="originalContent" value="let lastFormData = null;&#10;let lastOriginalResult = null;&#10;let currencySymbol = '$';&#10;&#10;document.getElementById('loan-form').onsubmit = async function(e) {&#10;    e.preventDefault();&#10;    const form = e.target;&#10;    const data = new FormData(form);&#10;    lastFormData = new FormData(form); // Save for reuse&#10;    try {&#10;        const response = await fetch('/calculate', {&#10;            method: 'POST',&#10;            body: data&#10;        });&#10;        if (!response.ok) {&#10;            const errorText = await response.text();&#10;            console.error('Backend error:', response.status, errorText);&#10;            alert('An error occurred: ' + response.status + '\n' + errorText);&#10;            return;&#10;        }&#10;        const result = await response.json();&#10;        currencySymbol = result.currency_symbol || '$';&#10;        lastOriginalResult = result.result.original;&#10;        displaySummary(result.result.original.summary, 'Summary', currencySymbol);&#10;        displaySchedule(result.result.original.schedule, currencySymbol);&#10;        drawCharts(result.result.original.schedule, null);&#10;        // Show custom repayment section&#10;        document.getElementById('custom-repayment-section').style.display = 'block';&#10;        document.getElementById('custom-summary').innerHTML = '';&#10;        document.getElementById('custom-repayment-input').value = '';&#10;    } catch (err) {&#10;        console.error('Network or JS error:', err);&#10;        alert('A network or application error occurred. See console for details.');&#10;    }&#10;};&#10;&#10;// Handle custom repayment button&#10;const customBtn = document.getElementById('custom-repayment-btn');&#10;if (customBtn) {&#10;    customBtn.onclick = async function() {&#10;        if (!lastFormData) return;&#10;        const customValue = parseFloat(document.getElementById('custom-repayment-input').value);&#10;        if (!customValue || customValue &lt;= 0) {&#10;            document.getElementById('custom-summary').innerHTML = '&lt;span style=&quot;color:red&quot;&gt;Enter a valid custom repayment amount.&lt;/span&gt;';&#10;            return;&#10;        }&#10;        // Prepare new form data&#10;        const data = new FormData();&#10;        for (let [k, v] of lastFormData.entries()) data.append(k, v);&#10;        data.append('custom_repayment', customValue);&#10;        try {&#10;            const response = await fetch('/calculate', {&#10;                method: 'POST',&#10;                body: data&#10;            });&#10;            if (!response.ok) {&#10;                const errorText = await response.text();&#10;                console.error('Backend error:', response.status, errorText);&#10;                alert('An error occurred: ' + response.status + '\n' + errorText);&#10;                return;&#10;            }&#10;            const result = await response.json();&#10;            currencySymbol = result.currency_symbol || '$';&#10;            if (!result.result.custom) {&#10;                document.getElementById('custom-summary').innerHTML = '&lt;span style=&quot;color:red&quot;&gt;Custom repayment must be greater than the minimum monthly payment.&lt;/span&gt;';&#10;                return;&#10;            }&#10;            displaySummary(result.result.custom.summary, 'Custom Repayment', currencySymbol);&#10;            displaySchedule(result.result.custom.schedule, currencySymbol);&#10;            displayCustomSummary(result.result.difference, result.result.original.summary, result.result.custom.summary, currencySymbol);&#10;            drawCharts(result.result.original.schedule, result.result.custom.schedule);&#10;        } catch (err) {&#10;            console.error('Network or JS error:', err);&#10;            alert('A network or application error occurred. See console for details.');&#10;        }&#10;    };&#10;}&#10;&#10;function displaySummary(summary, label = 'Summary', symbol = '$') {&#10;    document.getElementById('summary').innerHTML = `&#10;        &lt;h2&gt;${label}&lt;/h2&gt;&#10;        &lt;p&gt;&lt;strong&gt;Monthly Repayment:&lt;/strong&gt; ${symbol}${summary.monthly_payment.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Total Payments:&lt;/strong&gt; ${symbol}${summary.total_payments.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Total Interest Paid:&lt;/strong&gt; ${symbol}${summary.total_interest.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Payoff Date:&lt;/strong&gt; ${summary.payoff_date}&lt;/p&gt;&#10;    `;&#10;}&#10;&#10;function displayCustomSummary(diff, orig, custom, symbol = '$') {&#10;    if (!diff) return;&#10;    document.getElementById('custom-summary').innerHTML = `&#10;        &lt;h3&gt;Comparison&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Difference in Total Payments:&lt;/strong&gt; ${symbol}${diff.total_payments_diff.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Months Saved:&lt;/strong&gt; ${diff.months_diff}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Original Payoff Date:&lt;/strong&gt; ${orig.payoff_date}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Custom Payoff Date:&lt;/strong&gt; ${custom.payoff_date}&lt;/p&gt;&#10;    `;&#10;}&#10;&#10;function displaySchedule(schedule, symbol = '$') {&#10;    let html = '&lt;h2&gt;Amortization Schedule&lt;/h2&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;Payment&lt;/th&gt;&lt;th&gt;Principal&lt;/th&gt;&lt;th&gt;Interest&lt;/th&gt;&lt;th&gt;Balance&lt;/th&gt;&lt;/tr&gt;';&#10;    schedule.forEach(row =&gt; {&#10;        html += `&lt;tr&gt;&lt;td&gt;${row.payment_number}&lt;/td&gt;&lt;td&gt;${row.date}&lt;/td&gt;&lt;td&gt;${symbol}${row.payment.toFixed(2)}&lt;/td&gt;&lt;td&gt;${symbol}${row.principal.toFixed(2)}&lt;/td&gt;&lt;td&gt;${symbol}${row.interest.toFixed(2)}&lt;/td&gt;&lt;td&gt;${symbol}${row.balance.toFixed(2)}&lt;/td&gt;&lt;/tr&gt;`;&#10;    });&#10;    html += '&lt;/table&gt;';&#10;    document.getElementById('schedule').innerHTML = html;&#10;    showDownloadButton();&#10;}&#10;&#10;// Show the download button after schedule is generated&#10;function showDownloadButton() {&#10;    document.getElementById('download-excel-btn').style.display = 'block';&#10;}&#10;&#10;// Hide the download button&#10;function hideDownloadButton() {&#10;    document.getElementById('download-excel-btn').style.display = 'none';&#10;}&#10;&#10;function drawCharts(originalSchedule, customSchedule) {&#10;    try {&#10;        const breakdownCanvas = document.getElementById('breakdownChart');&#10;        const balanceAndInterestCanvas = document.getElementById('balanceAndInterestChart');&#10;        const ctx2 = breakdownCanvas?.getContext('2d');&#10;        const ctx3 = balanceAndInterestCanvas?.getContext('2d');&#10;        if (!window.Chart) {&#10;            console.error('Chart.js is not loaded.');&#10;            return;&#10;        }&#10;        if (!ctx2 || !ctx3) {&#10;            console.error('One or more canvas elements not found or context not available.');&#10;            return;&#10;        }&#10;        // Destroy existing charts if they exist&#10;        const chart2 = Chart.getChart(breakdownCanvas);&#10;        if (chart2) chart2.destroy();&#10;        const chart3 = Chart.getChart(balanceAndInterestCanvas);&#10;        if (chart3) chart3.destroy();&#10;        // Prepare data for original&#10;        const labels = originalSchedule.map(row =&gt; row.payment_number);&#10;        const balances = originalSchedule.map(row =&gt; row.balance);&#10;        let cumulativeInterest = [];&#10;        let total = 0;&#10;        for (let i = 0; i &lt; originalSchedule.length; i++) {&#10;            total += originalSchedule[i].interest;&#10;            cumulativeInterest.push(Number(total.toFixed(2)));&#10;        }&#10;        // Prepare data for custom if present&#10;        let customBalances = [], customCumulativeInterest = [], customLabels = [];&#10;        if (customSchedule) {&#10;            customLabels = customSchedule.map(row =&gt; row.payment_number);&#10;            customBalances = customSchedule.map(row =&gt; row.balance);&#10;            let cTotal = 0;&#10;            for (let i = 0; i &lt; customSchedule.length; i++) {&#10;                cTotal += customSchedule[i].interest;&#10;                customCumulativeInterest.push(Number(cTotal.toFixed(2)));&#10;            }&#10;        }&#10;        // Line chart: Principal &amp; Cumulative Interest Over Time&#10;        new Chart(ctx3, {&#10;            type: 'line',&#10;            data: {&#10;                labels: labels,&#10;                datasets: [&#10;                    {&#10;                        label: 'Original Remaining Principal',&#10;                        data: balances,&#10;                        borderColor: 'blue',&#10;                        fill: false&#10;                    },&#10;                    {&#10;                        label: 'Original Cumulative Interest Paid',&#10;                        data: cumulativeInterest,&#10;                        borderColor: 'orange',&#10;                        fill: false&#10;                    },&#10;                    ...(customSchedule ? [&#10;                        {&#10;                            label: 'Custom Remaining Principal',&#10;                            data: customBalances,&#10;                            borderColor: 'green',&#10;                            borderDash: [5,5],&#10;                            fill: false&#10;                        },&#10;                        {&#10;                            label: 'Custom Cumulative Interest Paid',&#10;                            data: customCumulativeInterest,&#10;                            borderColor: 'red',&#10;                            borderDash: [5,5],&#10;                            fill: false&#10;                        }&#10;                    ] : [])&#10;                ]&#10;            },&#10;            options: {&#10;                responsive: true,&#10;                plugins: {&#10;                    legend: { position: 'top' },&#10;                    title: { display: true, text: 'Principal &amp; Cumulative Interest Over Time' }&#10;                }&#10;            }&#10;        });&#10;        // Bar chart: Principal/Interest breakdown (original only)&#10;        const principals = originalSchedule.map(row =&gt; row.principal);&#10;        const interests = originalSchedule.map(row =&gt; row.interest);&#10;        new Chart(ctx2, {&#10;            type: 'bar',&#10;            data: {&#10;                labels: labels,&#10;                datasets: [&#10;                    {&#10;                        label: 'Principal',&#10;                        data: principals,&#10;                        backgroundColor: 'green',&#10;                    },&#10;                    {&#10;                        label: 'Interest',&#10;                        data: interests,&#10;                        backgroundColor: 'red',&#10;                    }&#10;                ]&#10;            },&#10;            options: { responsive: true, stacked: true }&#10;        });&#10;    } catch (err) {&#10;        console.error('Error drawing charts:', err);&#10;    }&#10;}&#10;&#10;// Add event listener for download button&#10;const downloadBtn = document.getElementById('download-excel-btn');&#10;if (downloadBtn) {&#10;    downloadBtn.onclick = async function() {&#10;        // Gather form data&#10;        const form = document.getElementById('loan-form');&#10;        const data = new FormData(form);&#10;        // Add custom repayment if present&#10;        const customVal = document.getElementById('custom-repayment-input').value;&#10;        if (customVal) data.append('custom_repayment', customVal);&#10;        // Get chart images as base64&#10;        const chart1 = document.getElementById('balanceAndInterestChart').toDataURL('image/png');&#10;        const chart2 = document.getElementById('breakdownChart').toDataURL('image/png');&#10;        data.append('chart1_base64', chart1);&#10;        data.append('chart2_base64', chart2);&#10;        try {&#10;            const response = await fetch('/download_excel', {&#10;                method: 'POST',&#10;                body: data&#10;            });&#10;            if (!response.ok) {&#10;                const errorText = await response.text();&#10;                alert('Failed to generate Excel file: ' + errorText);&#10;                return;&#10;            }&#10;            const blob = await response.blob();&#10;            const url = window.URL.createObjectURL(blob);&#10;            const a = document.createElement('a');&#10;            a.href = url;&#10;            a.download = 'amortization.xlsx';&#10;            document.body.appendChild(a);&#10;            a.click();&#10;            a.remove();&#10;            window.URL.revokeObjectURL(url);&#10;        } catch (err) {&#10;            alert('An error occurred while downloading the Excel file.');&#10;            console.error(err);&#10;        }&#10;    };&#10;}&#10;" />
              <option name="updatedContent" value="let lastFormData = null;&#10;let lastOriginalResult = null;&#10;let currencySymbol = '$';&#10;&#10;document.getElementById('loan-form').onsubmit = async function(e) {&#10;    e.preventDefault();&#10;    const form = e.target;&#10;    const data = new FormData(form);&#10;    lastFormData = new FormData(form); // Save for reuse&#10;    try {&#10;        const response = await fetch('/calculate', {&#10;            method: 'POST',&#10;            body: data&#10;        });&#10;        if (!response.ok) {&#10;            const errorText = await response.text();&#10;            console.error('Backend error:', response.status, errorText);&#10;            alert('An error occurred: ' + response.status + '\n' + errorText);&#10;            return;&#10;        }&#10;        const result = await response.json();&#10;        currencySymbol = result.currency_symbol || '$';&#10;        lastOriginalResult = result.result.original;&#10;        displaySummary(result.result.original.summary, 'Summary', currencySymbol);&#10;        displaySchedule(result.result.original.schedule, currencySymbol);&#10;        drawCharts(result.result.original.schedule, null);&#10;        // Show custom repayment section&#10;        document.getElementById('custom-repayment-section').style.display = 'block';&#10;        document.getElementById('custom-summary').innerHTML = '';&#10;        document.getElementById('custom-repayment-input').value = '';&#10;    } catch (err) {&#10;        console.error('Network or JS error:', err);&#10;        alert('A network or application error occurred. See console for details.');&#10;    }&#10;};&#10;&#10;// Handle custom repayment button&#10;const customBtn = document.getElementById('custom-repayment-btn');&#10;if (customBtn) {&#10;    customBtn.onclick = async function() {&#10;        if (!lastFormData) return;&#10;        const customValue = parseFloat(document.getElementById('custom-repayment-input').value);&#10;        if (!customValue || customValue &lt;= 0) {&#10;            document.getElementById('custom-summary').innerHTML = '&lt;span style=&quot;color:red&quot;&gt;Enter a valid custom repayment amount.&lt;/span&gt;';&#10;            return;&#10;        }&#10;        // Prepare new form data&#10;        const data = new FormData();&#10;        for (let [k, v] of lastFormData.entries()) data.append(k, v);&#10;        data.append('custom_repayment', customValue);&#10;        try {&#10;            const response = await fetch('/calculate', {&#10;                method: 'POST',&#10;                body: data&#10;            });&#10;            if (!response.ok) {&#10;                const errorText = await response.text();&#10;                console.error('Backend error:', response.status, errorText);&#10;                alert('An error occurred: ' + response.status + '\n' + errorText);&#10;                return;&#10;            }&#10;            const result = await response.json();&#10;            currencySymbol = result.currency_symbol || '$';&#10;            if (!result.result.custom) {&#10;                document.getElementById('custom-summary').innerHTML = '&lt;span style=&quot;color:red&quot;&gt;Custom repayment must be greater than the minimum monthly payment.&lt;/span&gt;';&#10;                return;&#10;            }&#10;            displaySummary(result.result.custom.summary, 'Custom Repayment', currencySymbol);&#10;            displaySchedule(result.result.custom.schedule, currencySymbol);&#10;            displayCustomSummary(result.result.difference, result.result.original.summary, result.result.custom.summary, currencySymbol);&#10;            drawCharts(result.result.original.schedule, result.result.custom.schedule);&#10;        } catch (err) {&#10;            console.error('Network or JS error:', err);&#10;            alert('A network or application error occurred. See console for details.');&#10;        }&#10;    };&#10;}&#10;&#10;function displaySummary(summary, label = 'Summary', symbol = '$') {&#10;    document.getElementById('summary').innerHTML = `&#10;        &lt;h2&gt;${label}&lt;/h2&gt;&#10;        &lt;p&gt;&lt;strong&gt;Monthly Repayment:&lt;/strong&gt; ${symbol}${summary.monthly_payment.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Total Payments:&lt;/strong&gt; ${symbol}${summary.total_payments.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Total Interest Paid:&lt;/strong&gt; ${symbol}${summary.total_interest.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Payoff Date:&lt;/strong&gt; ${summary.payoff_date}&lt;/p&gt;&#10;    `;&#10;}&#10;&#10;function displayCustomSummary(diff, orig, custom, symbol = '$') {&#10;    if (!diff) return;&#10;    document.getElementById('custom-summary').innerHTML = `&#10;        &lt;h3&gt;Comparison&lt;/h3&gt;&#10;        &lt;p&gt;&lt;strong&gt;Difference in Total Payments:&lt;/strong&gt; ${symbol}${diff.total_payments_diff.toLocaleString()}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Months Saved:&lt;/strong&gt; ${diff.months_diff}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Original Payoff Date:&lt;/strong&gt; ${orig.payoff_date}&lt;/p&gt;&#10;        &lt;p&gt;&lt;strong&gt;Custom Payoff Date:&lt;/strong&gt; ${custom.payoff_date}&lt;/p&gt;&#10;    `;&#10;}&#10;&#10;function displaySchedule(schedule, symbol = '$') {&#10;    let html = '&lt;h2&gt;Amortization Schedule&lt;/h2&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;#&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;Payment&lt;/th&gt;&lt;th&gt;Principal&lt;/th&gt;&lt;th&gt;Interest&lt;/th&gt;&lt;th&gt;Balance&lt;/th&gt;&lt;/tr&gt;';&#10;    schedule.forEach(row =&gt; {&#10;        html += `&lt;tr&gt;&lt;td&gt;${row.payment_number}&lt;/td&gt;&lt;td&gt;${row.date}&lt;/td&gt;&lt;td&gt;${symbol}${row.payment.toFixed(2)}&lt;/td&gt;&lt;td&gt;${symbol}${row.principal.toFixed(2)}&lt;/td&gt;&lt;td&gt;${symbol}${row.interest.toFixed(2)}&lt;/td&gt;&lt;td&gt;${symbol}${row.balance.toFixed(2)}&lt;/td&gt;&lt;/tr&gt;`;&#10;    });&#10;    html += '&lt;/table&gt;';&#10;    document.getElementById('schedule').innerHTML = html;&#10;    showDownloadButton();&#10;}&#10;&#10;// Show the download button after schedule is generated&#10;function showDownloadButton() {&#10;    console.log('showDownloadButton called');&#10;    document.getElementById('download-excel-btn').style.display = 'block';&#10;}&#10;&#10;// Hide the download button&#10;function hideDownloadButton() {&#10;    document.getElementById('download-excel-btn').style.display = 'none';&#10;}&#10;&#10;function drawCharts(originalSchedule, customSchedule) {&#10;    try {&#10;        const breakdownCanvas = document.getElementById('breakdownChart');&#10;        const balanceAndInterestCanvas = document.getElementById('balanceAndInterestChart');&#10;        const ctx2 = breakdownCanvas?.getContext('2d');&#10;        const ctx3 = balanceAndInterestCanvas?.getContext('2d');&#10;        if (!window.Chart) {&#10;            console.error('Chart.js is not loaded.');&#10;            return;&#10;        }&#10;        if (!ctx2 || !ctx3) {&#10;            console.error('One or more canvas elements not found or context not available.');&#10;            return;&#10;        }&#10;        // Destroy existing charts if they exist&#10;        const chart2 = Chart.getChart(breakdownCanvas);&#10;        if (chart2) chart2.destroy();&#10;        const chart3 = Chart.getChart(balanceAndInterestCanvas);&#10;        if (chart3) chart3.destroy();&#10;        // Prepare data for original&#10;        const labels = originalSchedule.map(row =&gt; row.payment_number);&#10;        const balances = originalSchedule.map(row =&gt; row.balance);&#10;        let cumulativeInterest = [];&#10;        let total = 0;&#10;        for (let i = 0; i &lt; originalSchedule.length; i++) {&#10;            total += originalSchedule[i].interest;&#10;            cumulativeInterest.push(Number(total.toFixed(2)));&#10;        }&#10;        // Prepare data for custom if present&#10;        let customBalances = [], customCumulativeInterest = [], customLabels = [];&#10;        if (customSchedule) {&#10;            customLabels = customSchedule.map(row =&gt; row.payment_number);&#10;            customBalances = customSchedule.map(row =&gt; row.balance);&#10;            let cTotal = 0;&#10;            for (let i = 0; i &lt; customSchedule.length; i++) {&#10;                cTotal += customSchedule[i].interest;&#10;                customCumulativeInterest.push(Number(cTotal.toFixed(2)));&#10;            }&#10;        }&#10;        // Line chart: Principal &amp; Cumulative Interest Over Time&#10;        new Chart(ctx3, {&#10;            type: 'line',&#10;            data: {&#10;                labels: labels,&#10;                datasets: [&#10;                    {&#10;                        label: 'Original Remaining Principal',&#10;                        data: balances,&#10;                        borderColor: 'blue',&#10;                        fill: false&#10;                    },&#10;                    {&#10;                        label: 'Original Cumulative Interest Paid',&#10;                        data: cumulativeInterest,&#10;                        borderColor: 'orange',&#10;                        fill: false&#10;                    },&#10;                    ...(customSchedule ? [&#10;                        {&#10;                            label: 'Custom Remaining Principal',&#10;                            data: customBalances,&#10;                            borderColor: 'green',&#10;                            borderDash: [5,5],&#10;                            fill: false&#10;                        },&#10;                        {&#10;                            label: 'Custom Cumulative Interest Paid',&#10;                            data: customCumulativeInterest,&#10;                            borderColor: 'red',&#10;                            borderDash: [5,5],&#10;                            fill: false&#10;                        }&#10;                    ] : [])&#10;                ]&#10;            },&#10;            options: {&#10;                responsive: true,&#10;                plugins: {&#10;                    legend: { position: 'top' },&#10;                    title: { display: true, text: 'Principal &amp; Cumulative Interest Over Time' }&#10;                }&#10;            }&#10;        });&#10;        // Bar chart: Principal/Interest breakdown (original only)&#10;        const principals = originalSchedule.map(row =&gt; row.principal);&#10;        const interests = originalSchedule.map(row =&gt; row.interest);&#10;        new Chart(ctx2, {&#10;            type: 'bar',&#10;            data: {&#10;                labels: labels,&#10;                datasets: [&#10;                    {&#10;                        label: 'Principal',&#10;                        data: principals,&#10;                        backgroundColor: 'green',&#10;                    },&#10;                    {&#10;                        label: 'Interest',&#10;                        data: interests,&#10;                        backgroundColor: 'red',&#10;                    }&#10;                ]&#10;            },&#10;            options: { responsive: true, stacked: true }&#10;        });&#10;    } catch (err) {&#10;        console.error('Error drawing charts:', err);&#10;    }&#10;}&#10;&#10;// Add event listener for download button&#10;const downloadBtn = document.getElementById('download-excel-btn');&#10;if (downloadBtn) {&#10;    downloadBtn.onclick = async function() {&#10;        // Gather form data&#10;        const form = document.getElementById('loan-form');&#10;        const data = new FormData(form);&#10;        // Add custom repayment if present&#10;        const customVal = document.getElementById('custom-repayment-input').value;&#10;        if (customVal) data.append('custom_repayment', customVal);&#10;        // Get chart images as base64&#10;        const chart1 = document.getElementById('balanceAndInterestChart').toDataURL('image/png');&#10;        const chart2 = document.getElementById('breakdownChart').toDataURL('image/png');&#10;        data.append('chart1_base64', chart1);&#10;        data.append('chart2_base64', chart2);&#10;        try {&#10;            const response = await fetch('/download_excel', {&#10;                method: 'POST',&#10;                body: data&#10;            });&#10;            if (!response.ok) {&#10;                const errorText = await response.text();&#10;                alert('Failed to generate Excel file: ' + errorText);&#10;                return;&#10;            }&#10;            const blob = await response.blob();&#10;            const url = window.URL.createObjectURL(blob);&#10;            const a = document.createElement('a');&#10;            a.href = url;&#10;            a.download = 'amortization.xlsx';&#10;            document.body.appendChild(a);&#10;            a.click();&#10;            a.remove();&#10;            window.URL.revokeObjectURL(url);&#10;        } catch (err) {&#10;            alert('An error occurred while downloading the Excel file.');&#10;            console.error(err);&#10;        }&#10;    };&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Loan Amortization Calculator&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/style.css&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;h1&gt;Loan Amortization Calculator&lt;/h1&gt;&#10;        &lt;form id=&quot;loan-form&quot;&gt;&#10;            &lt;label&gt;Purchase Price: &lt;input type=&quot;number&quot; step=&quot;0.01&quot; name=&quot;purchase_price&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Interest Rate (%): &lt;input type=&quot;number&quot; step=&quot;0.01&quot; name=&quot;interest_rate&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Down Payment: &lt;input type=&quot;number&quot; step=&quot;0.01&quot; name=&quot;down_payment&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Loan Term (years): &lt;input type=&quot;number&quot; name=&quot;loan_term&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Start Date: &lt;input type=&quot;date&quot; name=&quot;start_date&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Calculate&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &lt;div id=&quot;summary&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;custom-repayment-section&quot; style=&quot;display:none; margin-top:20px;&quot;&gt;&#10;            &lt;label&gt;Custom Monthly Repayment: &lt;input type=&quot;number&quot; step=&quot;0.01&quot; id=&quot;custom-repayment-input&quot;&gt;&lt;/label&gt;&#10;            &lt;button id=&quot;custom-repayment-btn&quot; type=&quot;button&quot;&gt;Recalculate with Custom Repayment&lt;/button&gt;&#10;            &lt;div id=&quot;custom-summary&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;canvas id=&quot;balanceAndInterestChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;        &lt;canvas id=&quot;breakdownChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;        &lt;button id=&quot;download-excel-btn&quot; style=&quot;display:none; margin-bottom:10px;&quot;&gt;Download Excel&lt;/button&gt;&#10;        &lt;div id=&quot;schedule&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;/static/app.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Loan Amortization Calculator&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/style.css&quot;&gt;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;h1&gt;Loan Amortization Calculator&lt;/h1&gt;&#10;        &lt;form id=&quot;loan-form&quot;&gt;&#10;            &lt;label&gt;Purchase Price: &lt;input type=&quot;number&quot; step=&quot;0.01&quot; name=&quot;purchase_price&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Interest Rate (%): &lt;input type=&quot;number&quot; step=&quot;0.01&quot; name=&quot;interest_rate&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Down Payment: &lt;input type=&quot;number&quot; step=&quot;0.01&quot; name=&quot;down_payment&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Loan Term (years): &lt;input type=&quot;number&quot; name=&quot;loan_term&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;label&gt;Start Date: &lt;input type=&quot;date&quot; name=&quot;start_date&quot; required&gt;&lt;/label&gt;&lt;br&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Calculate&lt;/button&gt;&#10;        &lt;/form&gt;&#10;        &lt;div id=&quot;summary&quot;&gt;&lt;/div&gt;&#10;        &lt;div id=&quot;custom-repayment-section&quot; style=&quot;display:none; margin-top:20px;&quot;&gt;&#10;            &lt;label&gt;Custom Monthly Repayment: &lt;input type=&quot;number&quot; step=&quot;0.01&quot; id=&quot;custom-repayment-input&quot;&gt;&lt;/label&gt;&#10;            &lt;button id=&quot;custom-repayment-btn&quot; type=&quot;button&quot;&gt;Recalculate with Custom Repayment&lt;/button&gt;&#10;            &lt;div id=&quot;custom-summary&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;canvas id=&quot;balanceAndInterestChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;        &lt;canvas id=&quot;breakdownChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;        &lt;button id=&quot;download-excel-btn&quot; style=&quot;margin-bottom:10px;&quot;&gt;Download Excel&lt;/button&gt;&#10;        &lt;div id=&quot;schedule&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;/static/app.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>